#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');
var User = require('../collections/user.js');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

 var io = require("socket.io")(server);

 var people  ;
 io.on("connection",function(socket){
 var names = "name";

 /*当前连接用户的ID，数组*/
 io.clients((error, clients) => {
   if (error) throw error;
   console.log(clients);
   people = clients.length;
   io.emit("peoples",people);
 });
/*断开后触发：当前连接用户的ID，数组*/
 socket.on('disconnect', (reason) => {
   io.clients((error, clients) => {
     if (error) throw error;
     console.log("断开后:",clients);
     people = clients.length;
     io.emit("peoples",people);
   });
  });
  // 广播消息
   socket.broadcast.emit("broadcast",socket.id);
   socket.on("chat message",function(msg,name){
     console.log(name);
    //  names.id = socket.id;
    //  console.log(socket.id);
     // console.log(msg);

     io.emit("return message",msg,name,socket.id);
     // msg = "";

     socket.on("ok",function(fn){


         fn();

     });

   });
 });


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
